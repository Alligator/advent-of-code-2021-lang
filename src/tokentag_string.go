// Code generated by "stringer -type=TokenTag -linecomment"; DO NOT EDIT.

package lang

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[EOF-0]
	_ = x[Identifier-1]
	_ = x[Str-2]
	_ = x[Num-3]
	_ = x[Colon-4]
	_ = x[LCurly-5]
	_ = x[RCurly-6]
	_ = x[LParen-7]
	_ = x[RParen-8]
	_ = x[LSquare-9]
	_ = x[RSquare-10]
	_ = x[Equal-11]
	_ = x[EqualEqual-12]
	_ = x[BangEqual-13]
	_ = x[Greater-14]
	_ = x[GreaterEqual-15]
	_ = x[Less-16]
	_ = x[Plus-17]
	_ = x[Star-18]
	_ = x[Comma-19]
	_ = x[Minus-20]
	_ = x[Slash-21]
	_ = x[Percent-22]
	_ = x[Var-23]
	_ = x[For-24]
	_ = x[In-25]
	_ = x[If-26]
	_ = x[Return-27]
	_ = x[Continue-28]
	_ = x[Match-29]
	_ = x[Else-30]
	_ = x[Break-31]
	_ = x[Fn-32]
	_ = x[Nil-33]
}

const _TokenTag_name = "EOFIdentifierStrNum:{}()[]===!=>>=<+*,-/%varforinifreturncontinuematchelsebreakfnnil"

var _TokenTag_index = [...]uint8{0, 3, 13, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 44, 47, 49, 51, 57, 65, 70, 74, 79, 81, 84}

func (i TokenTag) String() string {
	if i >= TokenTag(len(_TokenTag_index)-1) {
		return "TokenTag(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TokenTag_name[_TokenTag_index[i]:_TokenTag_index[i+1]]
}
