program
    section*

section
    IDENTIFIER ":" block
    IDENTIFIER ":" expression

block
    "{" statement* "}"

statement
    varDecl
    forLoop
    ifStmt
    returnStmt
    continueStmt
    breakStmt
    matchStmt
    block
    expression

varDecl
    "var" IDENTIFIER "=" expression

forLoop
    "for" IDENTIFIER "in" expression block
    "for" IDENTIFIER "," IDENTIFIER "in" expression block

ifStmt
    "if" expression block
    "if" expression block "else" block
    "if" expression block "else" ifStmt

returnStmt
    "return" expression

continueStmt 
    "continue"

breakStmt
    "break"

matchStmt
    "match" expression "{" matchCase* "}"

matchCase
    expression ":" block

expression
    assignment

assignment
    comparison ( "=" assigment )*

comparison
    sum
    sum "==" comparison
    sum ">"  comparison
    sum ">=" comparison
    sum "<"  comparison
    sum "!=" comparison

sum
    product
    product "+" sum
    product "-" sum

product
    unary
    unary "*" product
    unary "/" product
    unary "%" product

unary
    primary
    call
    subscript

primary
    STRING
    NUMBER
    NIL
    IDENTIFIER
    hashMap
    grouping
    function

call
    primary "(" arguments ")"

arguments
    expression ( "," arguments )*

subscript
    primary "[" expression "]"

hashMap
    "{" hashMapItem* "}"

hashMapItem
    IDENTIFIER ":" expression ( "," hashmapItem )*

grouping
    "(" expression ")"

function
    "fn" IDENTIFIER "(" arguments ")" block

STRING
    "'" <anything except '> "'"

NUMBER
    DIGIT*
    
NIL
    "nil"

IDENTIFIER
    ALPHA ALPHANUM*

ALPHANUM
    ALPHA
    DIGIT

DIGIT
    "0" .. "9"

ALPHA
    "a" .. "z"
    "A" .. "Z"
    "_"

